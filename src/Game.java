import java.io.Serializable;

// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

/************************************************************/
/**
 * 
 */
public class Game implements Serializable {
	private Board board_; // a pente board
	private int currPlayer_; // current player, 1 for player1, 2 for player 2
	private boolean winner_;
	private int x_; // x value of stone placed
	private int y_; // y value of stone placed
	private boolean winnerGomoku_;

	/**
	 * A game of Pente.
	 */
	public Game () {
		board_ = new Board(19,19);
		currPlayer_ = 2;
		winner_ = false;
		winnerGomoku_ = false;
		board_.placeStone(9,9,1);
	}

	/**
	 * get the board
	 * 
	 * @return the board
	 */
	public Board getBoard () {
		return board_;
	}

	/**
	 * the method changes the player turn
	 */
	public void startRound () {
		if ( currPlayer_ == 1 ) {
			currPlayer_ = 2;
		} else if ( currPlayer_ == 2 ) {
			currPlayer_ = 1;
		} else {
			System.out.println("Invalid player number.");
		}
	}

	/**
	 * Check if the player wants to place stone
	 * 
	 * @param x
	 *          the x of Stone
	 * @param y
	 *          the y of Stone
	 * @return return true if the player wants to place stone
	 */
	public boolean placeStone ( int x, int y ) {
		x_ = x;
		y_ = y;
		if ( board_.placeStone(x,y,currPlayer_) ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Gets the current player.
	 * 
	 * @return 1 for player1, 2 for player 2
	 */
	public int getCurrentPlayer () {
		return currPlayer_;
	}

	/**
	 * Check if the player is winner
	 * 
	 * @param numberOfConnection
	 *          the number of connection stones player wants to play
	 * @param numberOfCaptures
	 *          the number of captures player wants to play
	 * @return return true if the player is winner
	 */
	public boolean isWinner ( int numberOfConnection, int numberOfCaptures ) {
		// TODO repaint after this in GUI
		board_.doCaptures(x_,y_,currPlayer_);
		if ( currPlayer_ == 1 ) {
			if ( board_.player1Captures(numberOfCaptures) || board_
			    .checkNumberAdjacent(x_,y_,currPlayer_,numberOfConnection) ) {
				winner_ = true;
			}
		} else if ( currPlayer_ == 2 ) {
			if ( board_.player2Captures(numberOfCaptures) || board_
			    .checkNumberAdjacent(x_,y_,currPlayer_,numberOfConnection) ) {
				winner_ = true;
			}
		} else {
			System.out.println("Invalid player number.");
		}
		return winner_;
	}

	/**
	 * Check if the player is winner in Gomoku game
	 * 
	 * @return return true if the player is winner in Gomoku game
	 */
	public boolean isWinnerGomoku () {
		if ( currPlayer_ == 1 ) {
			if ( board_.checkFiveAdjecentGomoku(x_,y_,currPlayer_) ) {
				winnerGomoku_ = true;
			}
		} else if ( currPlayer_ == 2 ) {
			if ( board_.checkFiveAdjecentGomoku(x_,y_,currPlayer_) ) {
				winnerGomoku_ = true;
			}
		} else {
			System.out.println("Invalid player number.");
		}
		return winnerGomoku_;
	}

	/**
	 * get the capture for each player
	 * 
	 * @param the
	 *          player we want to get the capture
	 * @return the number of captures of the player
	 */
	public int getCapture ( int player ) {
		return board_.getCapture(player);
	}

}
