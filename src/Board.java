import java.io.Serializable;

// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

/************************************************************/
/**
 * 
 * 
 */
public class Board implements Serializable {

	private int[][] board_; // the pente board
	private int p1Captures_; // num captures made by player 1
	private int p2Captures_; // num captures made by player 2
	private int numX_; // number of x values on the board
	private int numY_; // number of y values on the board

	/**
	 * Create a pente board.
	 * 
	 * @param xVals
	 *          number of x values on the board
	 * @param yVals
	 *          number of y values on the board
	 */
	public Board ( int xVals, int yVals ) {
		p1Captures_ = 0;
		p2Captures_ = 0;
		board_ = new int[xVals][yVals];
		numX_ = xVals;
		numY_ = yVals;

		// initialize board with all zeros- no stone has been placed
		for ( int i = 0 ; i < xVals ; i++ ) {
			for ( int j = 0 ; j < yVals ; j++ ) {
				board_[i][j] = 0;
			}
		}
	}

	/**
	 * Does player 1 have enough captures to win the game (at least five
	 * captures)?
	 * 
	 * @return true if player 1 has at least five captures, false otherwise
	 */
	public boolean player1Captures ( int numberOfCaptures ) {
		if ( p1Captures_ >= numberOfCaptures ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Does player 2 have enough captures to win the game (at least five
	 * captures)?
	 * 
	 * @return true if player 2 has at least five captures, false otherwise
	 */
	public boolean player2Captures ( int numberOfCaptures ) {
		if ( p2Captures_ >= numberOfCaptures ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Place a stone on the board.
	 * 
	 * @param x
	 *          x coordinate of the position to place the stone on the board, x
	 *          >=0, x < board size.
	 * @param y
	 *          y coordinate of the position to place the stone on the board, y
	 *          >=0, y < board size
	 * @param player
	 *          value 1 for player 1, value 2 for player 2.
	 * @return true if the stone has been placed in a valid location, false
	 *         otherwise
	 */
	public boolean placeStone ( int x, int y, int player ) {
		// first check if the stone will be placed in a valid location
		int boardLoc = board_[x][y]; // location on the board to place the stone
		if ( boardLoc == 1 || boardLoc == 2 ) {
			return false; // stone is already placed in this location-- not a
			// valid
			// move
		} else if ( boardLoc == 0 ) {
			// this is a valid condition, continue
		} else {
			System.out.println("Invalid board number.");
		}

		board_[x][y] = player; // place player stone on board

		return true; // stone has been placed successfully

	}

	/**
	 * Check if there are any captures to be made.
	 *
	 * @param player
	 *          number of the player, num = 1 for player 1, num = 2 for player 2
	 * @return number of captures a player has made, num >= 0
	 */
	public void doCaptures ( int x, int y, int player ) {
		int otherplayer = 0;
		if ( player == 1 ) {
			otherplayer = 2;
		} else if ( player == 2 ) {
			otherplayer = 1;
		}

		int numCaptures = 0;

		// check the points on right side
		if ( x <= numX_ - 4 && board_[x + 1][y] == otherplayer
		    && board_[x + 2][y] == otherplayer && board_[x + 3][y] == player ) {
			board_[x + 1][y] = 0;
			board_[x + 2][y] = 0;
			numCaptures++;
			// check the points on left side
		}
		if ( x >= 3 && board_[x - 1][y] == otherplayer
		    && board_[x - 2][y] == otherplayer && board_[x - 3][y] == player ) {
			board_[x - 1][y] = 0;
			board_[x - 2][y] = 0;
			numCaptures++;
			// check the points above
		}
		if ( y >= 3 && board_[x][y - 1] == otherplayer
		    && board_[x][y - 2] == otherplayer && board_[x][y - 3] == player ) {
			board_[x][y - 1] = 0;
			board_[x][y - 2] = 0;
			numCaptures++;
			// check the points below
		}
		if ( y <= numY_ - 4 && board_[x][y + 1] == otherplayer
		    && board_[x][y + 2] == otherplayer && board_[x][y + 3] == player ) {
			board_[x][y + 1] = 0;
			board_[x][y + 2] = 0;
			numCaptures++;
			// check the points on the right upper diagonal
		}
		if ( x <= numX_ - 4 && y >= 3 && board_[x + 1][y - 1] == otherplayer
		    && board_[x + 2][y - 2] == otherplayer
		    && board_[x + 3][y - 3] == player ) {
			board_[x + 1][y - 1] = 0;
			board_[x + 2][y - 2] = 0;
			numCaptures++;
			// check the points on the right lower diagonal
		}
		if ( (x <= numX_ - 4 && y <= numY_ - 4
		    && board_[x + 1][y + 1] == otherplayer
		    && board_[x + 2][y + 2] == otherplayer
		    && board_[x + 3][y + 3] == player) ) {
			board_[x + 1][y + 1] = 0;
			board_[x + 2][y + 2] = 0;
			numCaptures++;
			// check the points on the left upper diagonal
		}
		if ( (x >= 3 && y >= 3 && board_[x - 1][y - 1] == otherplayer
		    && board_[x - 2][y - 2] == otherplayer
		    && board_[x - 3][y - 3] == player) ) {
			board_[x - 1][y - 1] = 0;
			board_[x - 2][y - 2] = 0;
			numCaptures++;
			// check the points on the left lower diagonal
		}
		if ( (x >= 3 && y <= numY_ - 4 && board_[x - 1][y + 1] == otherplayer
		    && board_[x - 2][y + 2] == otherplayer
		    && board_[x - 3][y + 3] == player) ) {
			board_[x - 1][y + 1] = 0;
			board_[x - 2][y + 2] = 0;
			numCaptures++;
		}

		if ( player == 1 ) {
			p1Captures_ = p1Captures_ + numCaptures;
		} else if ( player == 2 ) {
			p2Captures_ = p2Captures_ + numCaptures;
		}

	}

	/**
	 * Checks whether the current player has the number of adjacent stones.
	 * 
	 * @param x
	 *          x value of the stone placed, x >=0 and x < board width
	 * @param y
	 *          y value of the stone placed, y >=0 and y < board height
	 * @param player
	 *          player number, num = 1 for player 1 and num = 2 for player 2
	 * @return true if the player has won, false otherwise
	 */
	public boolean checkFiveAdjecentGomoku ( int x, int y, int player ) {
		int numHorizontal = 1;
		int numVertical = 1;
		int numPosDiagonal = 1;
		int numNegDiagonal = 1;

		// Horizontal
		for ( int i = 1 ; (i <= 5) && (i + x < numX_) ; i++ ) {
			if ( player == board_[x + i][y] ) {
				numHorizontal++;
				System.out.println("numHorizontal: " + numHorizontal);
			} else {
				break;
			}
		}
		for ( int i = 1 ; (i <= 5) && (x - i >= 0) ; i++ ) {
			if ( player == board_[x - i][y] ) {
				numHorizontal++;
			} else {
				break;
			}
		}

		// Vertical
		for ( int i = 1 ; (i <= 5) && (i + y < numY_) ; i++ ) {
			if ( player == board_[x][y + i] ) {
				numVertical++;
			} else {
				break;
			}
		}
		for ( int i = 1 ; (i <= 5) && (y - i >= 0) ; i++ ) {
			if ( player == board_[x][y - i] ) {
				numVertical++;
			} else {
				break;
			}
		}

		// Positive Diagonal
		for ( int i = 1 ; (i <= 5) && (i + x < numX_) && (y - i >= 0) ; i++ ) {
			if ( player == board_[x + i][y - i] ) {
				numPosDiagonal++;
			} else {
				break;
			}
		}

		for ( int i = 1 ; (i <= 5) && (x - i >= 0) && (y + i < numY_) ; i++ ) {
			if ( player == board_[x - i][y + i] ) {
				numPosDiagonal++;
			} else {
				break;
			}
		}

		// Negative Diagonal
		for ( int i = 1 ; (i <= 5) && (i + x < numX_) && (y + i < numY_) ; i++ ) {
			if ( player == board_[x + i][y + i] ) {
				numNegDiagonal++;
			} else {
				break;
			}
		}
		for ( int i = 1 ; (i <= 5) && (x - i >= 0) && (y - i >= 0) ; i++ ) {
			if ( player == board_[x - i][y - i] ) {
				numNegDiagonal++;
			} else {
				break;
			}
		}

		if ( numHorizontal == 5 || numVertical == 5 || numPosDiagonal == 5
		    || numNegDiagonal == 5 ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Checks whether the current player has the number of adjacent stones.
	 * 
	 * @param x
	 *          x value of the stone placed, x >=0 and x < board width
	 * @param y
	 *          y value of the stone placed, y >=0 and y < board height
	 * @param player
	 *          player number, num = 1 for player 1 and num = 2 for player 2
	 * @param numberOfConnections,
	 *          number of stones in a row to win
	 * @return true if the player has won, false otherwise
	 */
	public boolean checkNumberAdjacent ( int x, int y, int player,
	                                     int numberOfConnection ) {
		int numHorizontal = 1;
		int numVertical = 1;
		int numPosDiagonal = 1;
		int numNegDiagonal = 1;

		// Horizontal
		for ( int i = 1 ; (i <= numberOfConnection) && (i + x < numX_) ; i++ ) {
			if ( player == board_[x + i][y] ) {
				numHorizontal++;
				System.out.println("numHorizontal: " + numHorizontal);
			} else {
				break;
			}
		}
		for ( int i = 1 ; (i <= numberOfConnection) && (x - i >= 0) ; i++ ) {
			if ( player == board_[x - i][y] ) {
				numHorizontal++;
			} else {
				break;
			}
		}

		// Vertical
		for ( int i = 1 ; (i <= numberOfConnection) && (i + y < numY_) ; i++ ) {
			if ( player == board_[x][y + i] ) {
				numVertical++;
			} else {
				break;
			}
		}
		for ( int i = 1 ; (i <= numberOfConnection) && (y - i >= 0) ; i++ ) {
			if ( player == board_[x][y - i] ) {
				numVertical++;
			} else {
				break;
			}
		}

		// Positive Diagonal
		for ( int i = 1 ; (i <= numberOfConnection) && (i + x < numX_)
		    && (y - i >= 0) ; i++ ) {
			if ( player == board_[x + i][y - i] ) {
				numPosDiagonal++;
			} else {
				break;
			}
		}

		for ( int i = 1 ; (i <= numberOfConnection) && (x - i >= 0)
		    && (y + i < numY_) ; i++ ) {
			if ( player == board_[x - i][y + i] ) {
				numPosDiagonal++;
			} else {
				break;
			}
		}

		// Negative Diagonal
		for ( int i = 1 ; (i <= numberOfConnection) && (i + x < numX_)
		    && (y + i < numY_) ; i++ ) {
			if ( player == board_[x + i][y + i] ) {
				numNegDiagonal++;
			} else {
				break;
			}
		}
		for ( int i = 1 ; (i <= numberOfConnection) && (x - i >= 0)
		    && (y - i >= 0) ; i++ ) {
			if ( player == board_[x - i][y - i] ) {
				numNegDiagonal++;
			} else {
				break;
			}
		}

		if ( numHorizontal >= numberOfConnection
		    || numVertical >= numberOfConnection
		    || numPosDiagonal >= numberOfConnection
		    || numNegDiagonal >= numberOfConnection ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * get the capture for each player
	 * 
	 * @param player
	 *          the player we want to get the capture
	 * @return the # of capture of the player
	 */
	public int getCapture ( int player ) {
		int capture = 0;
		if ( player == 1 ) {
			capture = p1Captures_;
		} else if ( player == 2 ) {
			capture = p2Captures_;
		}
		return capture;

	}

	/**
	 * get the x value
	 * 
	 * @return the x value
	 */
	public int getNumX () {
		return numX_;
	}

	/**
	 * get the y value
	 * 
	 * @return the y value
	 */
	public int getNumY () {
		return numY_;
	}

	/**
	 * get the stone
	 * 
	 * @param x
	 *          the x value
	 * @param y
	 *          the y value
	 * @return the stone
	 */
	public int getStone ( int x, int y ) {
		return board_[x][y];
	}

}
